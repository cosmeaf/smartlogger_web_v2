// backend/server.js
const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3002;

// Middlewares
app.use(cors());
app.use(express.json());

// Servir arquivos estáticos para a interface web
app.use('/api-docs', express.static(path.join(__dirname, 'public')));

// Configuração do banco MySQL - SEUS DADOS REAIS
const dbConfig = {
  host: '77.37.41.27',
  port: 3306,               // Porta padrão do MySQL
  user: 'superuser',
  password: 'C0smeSmart@2024',
  database: 'traccar'
};

// Criar conexão com o banco
const connection = mysql.createConnection(dbConfig);

// ========== INTERFACE WEB PARA DOCUMENTAÇÃO DA API ==========
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>SmartLogger API - Traccar Database</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 40px 20px; text-align: center; border-radius: 10px; margin-bottom: 30px; }
            .header h1 { font-size: 2.5em; margin-bottom: 10px; }
            .header p { font-size: 1.2em; opacity: 0.9; }
            .endpoint-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; }
            .endpoint-card { background: white; border-radius: 10px; padding: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); transition: transform 0.2s; }
            .endpoint-card:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0,0,0,0.15); }
            .method { display: inline-block; padding: 4px 8px; border-radius: 4px; font-weight: bold; font-size: 0.8em; }
            .get { background: #e3f2fd; color: #1976d2; }
            .post { background: #f3e5f5; color: #7b1fa2; }
            .endpoint-url { font-family: monospace; background: #f5f5f5; padding: 10px; border-radius: 5px; margin: 10px 0; word-break: break-all; }
            .btn { display: inline-block; padding: 10px 20px; background: #667eea; color: white; text-decoration: none; border-radius: 5px; margin: 5px; transition: background 0.2s; font-size: 0.9em; }
            .btn:hover { background: #5a6fd8; }
            .status { text-align: center; padding: 20px; background: white; border-radius: 10px; margin: 20px 0; }
            .status.online { border-left: 4px solid #4caf50; }
            code { background: #f0f0f0; padding: 2px 6px; border-radius: 3px; font-family: monospace; color: #e91e63; }
            .footer { text-align: center; margin-top: 40px; color: #666; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>🚀 SmartLogger API</h1>
                <p>Interface para dados do Traccar Database</p>
                <p><strong>Servidor:</strong> ${req.get('host')} | <strong>Status:</strong> Online ✅</p>
            </div>

            <div class="status online">
                <h3>📡 Status da Conexão</h3>
                <p><strong>Database:</strong> ${dbConfig.database} | <strong>Host:</strong> ${dbConfig.host}</p>
                <p><strong>Porta:</strong> ${PORT} | <strong>Última verificação:</strong> ${new Date().toLocaleString('pt-BR')}</p>
            </div>

            <h2 style="margin: 30px 0 20px 0; color: #333;">📋 Endpoints Principais</h2>
            
            <div class="endpoint-grid">
                <div class="endpoint-card">
                    <h3><span class="method get">GET</span> Dispositivos</h3>
                    <div class="endpoint-url">/database/tc-devices</div>
                    <p>Lista todos os dispositivos cadastrados no Traccar</p>
                    <a href="/database/tc-devices" class="btn" target="_blank">📱 JSON</a>
                    <a href="/database/view/tc_devices" class="btn" target="_blank">👁️ Visualizar</a>
                </div>

                <div class="endpoint-card">
                    <h3><span class="method get">GET</span> Posições</h3>
                    <div class="endpoint-url">/database/tc-positions</div>
                    <p>Lista todas as posições GPS registradas</p>
                    <a href="/database/tc-positions?limit=100" class="btn" target="_blank">� JSON</a>
                    <a href="/database/view/tc_positions" class="btn" target="_blank">👁️ Visualizar</a>
                </div>

                <div class="endpoint-card">
                    <h3><span class="method get">GET</span> Usuários</h3>
                    <div class="endpoint-url">/database/tc-users</div>
                    <p>Lista todos os usuários do sistema</p>
                    <a href="/database/tc-users" class="btn" target="_blank">� JSON</a>
                    <a href="/database/view/tc_users" class="btn" target="_blank">👁️ Visualizar</a>
                </div>

                <div class="endpoint-card">
                    <h3><span class="method get">GET</span> Eventos</h3>
                    <div class="endpoint-url">/database/tc-events</div>
                    <p>Lista todos os eventos registrados</p>
                    <a href="/database/tc-events?limit=100" class="btn" target="_blank">📱 JSON</a>
                    <a href="/database/view/tc_events" class="btn" target="_blank">👁️ Visualizar</a>
                </div>

                <div class="endpoint-card">
                    <h3><span class="method get">GET</span> Todas as Tabelas</h3>
                    <div class="endpoint-url">/database/tables</div>
                    <p>Lista todas as tabelas disponíveis</p>
                    <a href="/database/tables" class="btn" target="_blank">🗂️ Ver Tabelas</a>
                </div>

                <div class="endpoint-card">
                    <h3><span class="method post">POST</span> Query Personalizada</h3>
                    <div class="endpoint-url">/database/query</div>
                    <p>Execute queries SELECT personalizadas</p>
                    <button onclick="showQueryExample()" class="btn">📝 Exemplo</button>
                </div>
            </div>

            <h2 style="margin: 40px 0 20px 0; color: #333;">🗂️ Explorador de Tabelas Traccar (48 Tabelas)</h2>
            <div style="background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                <p style="margin-bottom: 15px; color: #666;">
                    <strong>📥 JSON:</strong> <code>/database/table/NOME_DA_TABELA</code> | 
                    <strong>👁️ Visualizador:</strong> <code>/database/view/NOME_DA_TABELA</code>
                </p>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                    <!-- Tabelas principais -->
                    <div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px;">
                        <h4>tc_devices</h4>
                        <a href="/database/table/tc_devices?limit=20" class="btn" target="_blank" style="margin-right: 5px;">📥 JSON</a>
                        <a href="/database/view/tc_devices" class="btn" target="_blank" style="background: #28a745;">👁️ Ver</a>
                    </div>
                    
                    <div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px;">
                        <h4>tc_positions</h4>
                        <a href="/database/table/tc_positions?limit=50" class="btn" target="_blank" style="margin-right: 5px;">📥 JSON</a>
                        <a href="/database/view/tc_positions" class="btn" target="_blank" style="background: #28a745;">👁️ Ver</a>
                    </div>
                    
                    <div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px;">
                        <h4>tc_users</h4>
                        <a href="/database/table/tc_users?limit=20" class="btn" target="_blank" style="margin-right: 5px;">📥 JSON</a>
                        <a href="/database/view/tc_users" class="btn" target="_blank" style="background: #28a745;">👁️ Ver</a>
                    </div>
                    
                    <div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px;">
                        <h4>tc_events</h4>
                        <a href="/database/table/tc_events?limit=50" class="btn" target="_blank" style="margin-right: 5px;">📥 JSON</a>
                        <a href="/database/view/tc_events" class="btn" target="_blank" style="background: #28a745;">👁️ Ver</a>
                    </div>
                    
                    <div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px;">
                        <h4>tc_groups</h4>
                        <a href="/database/table/tc_groups?limit=20" class="btn" target="_blank" style="margin-right: 5px;">📥 JSON</a>
                        <a href="/database/view/tc_groups" class="btn" target="_blank" style="background: #28a745;">👁️ Ver</a>
                    </div>
                    
                    <div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px;">
                        <h4>tc_geofences</h4>
                        <a href="/database/table/tc_geofences?limit=20" class="btn" target="_blank" style="margin-right: 5px;">📥 JSON</a>
                        <a href="/database/view/tc_geofences" class="btn" target="_blank" style="background: #28a745;">👁️ Ver</a>
                    </div>
                </div>
                
                <details style="margin-top: 20px;">
                    <summary style="cursor: pointer; font-weight: bold; color: #667eea;">📋 Ver todas as 48 tabelas (clique para expandir)</summary>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; margin-top: 15px;">
                        <a href="/database/view/tc_attributes" class="btn" target="_blank" style="background: #17a2b8;">tc_attributes</a>
                        <a href="/database/view/tc_calendars" class="btn" target="_blank" style="background: #17a2b8;">tc_calendars</a>
                        <a href="/database/view/tc_commands" class="btn" target="_blank" style="background: #17a2b8;">tc_commands</a>
                        <a href="/database/view/tc_commands_queue" class="btn" target="_blank" style="background: #17a2b8;">tc_commands_queue</a>
                        <a href="/database/view/tc_device_attribute" class="btn" target="_blank" style="background: #17a2b8;">tc_device_attribute</a>
                        <a href="/database/view/tc_device_command" class="btn" target="_blank" style="background: #17a2b8;">tc_device_command</a>
                        <a href="/database/view/tc_device_driver" class="btn" target="_blank" style="background: #17a2b8;">tc_device_driver</a>
                        <a href="/database/view/tc_device_geofence" class="btn" target="_blank" style="background: #17a2b8;">tc_device_geofence</a>
                        <a href="/database/view/tc_device_maintenance" class="btn" target="_blank" style="background: #17a2b8;">tc_device_maintenance</a>
                        <a href="/database/view/tc_device_notification" class="btn" target="_blank" style="background: #17a2b8;">tc_device_notification</a>
                        <a href="/database/view/tc_device_order" class="btn" target="_blank" style="background: #17a2b8;">tc_device_order</a>
                        <a href="/database/view/tc_device_report" class="btn" target="_blank" style="background: #17a2b8;">tc_device_report</a>
                        <a href="/database/view/tc_drivers" class="btn" target="_blank" style="background: #17a2b8;">tc_drivers</a>
                        <a href="/database/view/tc_group_attribute" class="btn" target="_blank" style="background: #17a2b8;">tc_group_attribute</a>
                        <a href="/database/view/tc_group_command" class="btn" target="_blank" style="background: #17a2b8;">tc_group_command</a>
                        <a href="/database/view/tc_group_driver" class="btn" target="_blank" style="background: #17a2b8;">tc_group_driver</a>
                        <a href="/database/view/tc_group_geofence" class="btn" target="_blank" style="background: #17a2b8;">tc_group_geofence</a>
                        <a href="/database/view/tc_group_maintenance" class="btn" target="_blank" style="background: #17a2b8;">tc_group_maintenance</a>
                        <a href="/database/view/tc_group_notification" class="btn" target="_blank" style="background: #17a2b8;">tc_group_notification</a>
                        <a href="/database/view/tc_group_order" class="btn" target="_blank" style="background: #17a2b8;">tc_group_order</a>
                        <a href="/database/view/tc_group_report" class="btn" target="_blank" style="background: #17a2b8;">tc_group_report</a>
                        <a href="/database/view/tc_keystore" class="btn" target="_blank" style="background: #17a2b8;">tc_keystore</a>
                        <a href="/database/view/tc_maintenances" class="btn" target="_blank" style="background: #17a2b8;">tc_maintenances</a>
                        <a href="/database/view/tc_notifications" class="btn" target="_blank" style="background: #17a2b8;">tc_notifications</a>
                        <a href="/database/view/tc_orders" class="btn" target="_blank" style="background: #17a2b8;">tc_orders</a>
                        <a href="/database/view/tc_reports" class="btn" target="_blank" style="background: #17a2b8;">tc_reports</a>
                        <a href="/database/view/tc_servers" class="btn" target="_blank" style="background: #17a2b8;">tc_servers</a>
                        <a href="/database/view/tc_statistics" class="btn" target="_blank" style="background: #17a2b8;">tc_statistics</a>
                        <a href="/database/view/tc_user_attribute" class="btn" target="_blank" style="background: #17a2b8;">tc_user_attribute</a>
                        <a href="/database/view/tc_user_calendar" class="btn" target="_blank" style="background: #17a2b8;">tc_user_calendar</a>
                        <a href="/database/view/tc_user_command" class="btn" target="_blank" style="background: #17a2b8;">tc_user_command</a>
                        <a href="/database/view/tc_user_device" class="btn" target="_blank" style="background: #17a2b8;">tc_user_device</a>
                        <a href="/database/view/tc_user_driver" class="btn" target="_blank" style="background: #17a2b8;">tc_user_driver</a>
                        <a href="/database/view/tc_user_geofence" class="btn" target="_blank" style="background: #17a2b8;">tc_user_geofence</a>
                        <a href="/database/view/tc_user_group" class="btn" target="_blank" style="background: #17a2b8;">tc_user_group</a>
                        <a href="/database/view/tc_user_maintenance" class="btn" target="_blank" style="background: #17a2b8;">tc_user_maintenance</a>
                        <a href="/database/view/tc_user_notification" class="btn" target="_blank" style="background: #17a2b8;">tc_user_notification</a>
                        <a href="/database/view/tc_user_order" class="btn" target="_blank" style="background: #17a2b8;">tc_user_order</a>
                        <a href="/database/view/tc_user_report" class="btn" target="_blank" style="background: #17a2b8;">tc_user_report</a>
                        <a href="/database/view/tc_user_user" class="btn" target="_blank" style="background: #17a2b8;">tc_user_user</a>
                        <a href="/database/view/DATABASECHANGELOG" class="btn" target="_blank" style="background: #6c757d;">DATABASECHANGELOG</a>
                        <a href="/database/view/DATABASECHANGELOGLOCK" class="btn" target="_blank" style="background: #6c757d;">DATABASECHANGELOGLOCK</a>
                    </div>
                </details>
                
                <p style="margin-top: 15px; font-size: 0.9em; color: #888;">
                    💡 <strong>📥 JSON</strong> = Dados brutos | <strong>👁️ Visualizador</strong> = Interface estilo Django REST Framework com paginação
                </p>
            </div>

            <div class="footer">
                <p>SmartLogger API v3.0 - Desenvolvido por CosmeDev</p>
                <p>Última atualização: ${new Date().toLocaleString('pt-BR')}</p>
            </div>
        </div>

        <script>
            function showQueryExample() {
                alert('Exemplo de query POST para /database/query:\\n\\n{\\n  "query": "SELECT * FROM tc_devices LIMIT 10"\\n}');
            }
        </script>
    </body>
    </html>
  `);
});

// ========== ENDPOINTS PARA TABELAS DO TRACCAR ==========

// ENDPOINT PRINCIPAL: /database/tc-devices
app.get('/database/tc-devices', (req, res) => {
  console.log('📡 Requisição recebida para buscar dispositivos...');
  
  const query = 'SELECT * FROM tc_devices';
  
  connection.query(query, (error, results) => {
    if (error) {
      console.error('❌ Erro na query:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro ao buscar dispositivos da tabela tc_devices',
        error: error.message
      });
    }
    
    console.log(`✅ Encontrados ${results.length} dispositivos`);
    
    res.json({
      success: true,
      data: results,
      count: results.length,
      table: 'tc_devices',
      query: query,
      message: `${results.length} dispositivos encontrados com sucesso`
    });
  });
});

// NOVO ENDPOINT: /database/tc-positions
app.get('/database/tc-positions', (req, res) => {
  console.log('📍 Requisição recebida para buscar posições...');
  
  const limit = req.query.limit || 1000; // Limite padrão para evitar sobrecarga
  const deviceId = req.query.deviceId;
  
  let query = 'SELECT * FROM tc_positions';
  let queryParams = [];
  
  if (deviceId) {
    query += ' WHERE deviceid = ?';
    queryParams.push(deviceId);
  }
  
  query += ' ORDER BY fixtime DESC LIMIT ?';
  queryParams.push(parseInt(limit));
  
  connection.query(query, queryParams, (error, results) => {
    if (error) {
      console.error('❌ Erro na query:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro ao buscar posições da tabela tc_positions',
        error: error.message
      });
    }
    
    console.log(`✅ Encontradas ${results.length} posições`);
    
    res.json({
      success: true,
      data: results,
      count: results.length,
      table: 'tc_positions',
      query: query,
      limit: limit,
      deviceId: deviceId || 'todos',
      message: `${results.length} posições encontradas com sucesso`
    });
  });
});

// NOVO ENDPOINT: /database/tc-users
app.get('/database/tc-users', (req, res) => {
  console.log('👥 Requisição recebida para buscar usuários...');
  
  const query = 'SELECT id, name, email, administrator, disabled, expirationtime FROM tc_users';
  
  connection.query(query, (error, results) => {
    if (error) {
      console.error('❌ Erro na query:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro ao buscar usuários da tabela tc_users',
        error: error.message
      });
    }
    
    console.log(`✅ Encontrados ${results.length} usuários`);
    
    res.json({
      success: true,
      data: results,
      count: results.length,
      table: 'tc_users',
      query: query,
      message: `${results.length} usuários encontrados com sucesso`
    });
  });
});

// NOVO ENDPOINT: /database/tc-events
app.get('/database/tc-events', (req, res) => {
  console.log('⚡ Requisição recebida para buscar eventos...');
  
  const limit = req.query.limit || 1000;
  const query = 'SELECT * FROM tc_events ORDER BY servertime DESC LIMIT ?';
  
  connection.query(query, [parseInt(limit)], (error, results) => {
    if (error) {
      console.error('❌ Erro na query:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro ao buscar eventos da tabela tc_events',
        error: error.message
      });
    }
    
    console.log(`✅ Encontrados ${results.length} eventos`);
    
    res.json({
      success: true,
      data: results,
      count: results.length,
      table: 'tc_events',
      query: query,
      limit: limit,
      message: `${results.length} eventos encontrados com sucesso`
    });
  });
});

// NOVO ENDPOINT: /database/tables (lista todas as tabelas)
app.get('/database/tables', (req, res) => {
  console.log('🗂️ Requisição recebida para buscar tabelas...');
  
  const query = 'SHOW TABLES';
  
  connection.query(query, (error, results) => {
    if (error) {
      console.error('❌ Erro na query:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro ao buscar tabelas do banco',
        error: error.message
      });
    }
    
    const tables = results.map(row => Object.values(row)[0]);
    console.log(`✅ Encontradas ${tables.length} tabelas`);
    
    res.json({
      success: true,
      data: tables,
      count: tables.length,
      database: dbConfig.database,
      message: `${tables.length} tabelas encontradas com sucesso`
    });
  });
});

// NOVO ENDPOINT: /database/view/:tableName (Visualizador estilo Django REST)
app.get('/database/view/:tableName', (req, res) => {
  const tableName = req.params.tableName;
  const limit = req.query.limit || 20;
  const page = parseInt(req.query.page) || 1;
  const offset = (page - 1) * limit;
  
  console.log(`👁️ Visualizador para tabela: ${tableName}`);
  
  // Lista de tabelas permitidas (segurança)
  const allowedTables = [
    'DATABASECHANGELOG', 'DATABASECHANGELOGLOCK',
    'tc_attributes', 'tc_calendars', 'tc_commands', 'tc_commands_queue',
    'tc_device_attribute', 'tc_device_command', 'tc_device_driver', 'tc_device_geofence',
    'tc_device_maintenance', 'tc_device_notification', 'tc_device_order', 'tc_device_report',
    'tc_devices', 'tc_drivers', 'tc_events', 'tc_geofences',
    'tc_group_attribute', 'tc_group_command', 'tc_group_driver', 'tc_group_geofence',
    'tc_group_maintenance', 'tc_group_notification', 'tc_group_order', 'tc_group_report',
    'tc_groups', 'tc_keystore', 'tc_maintenances', 'tc_notifications',
    'tc_orders', 'tc_positions', 'tc_reports', 'tc_servers', 'tc_statistics',
    'tc_user_attribute', 'tc_user_calendar', 'tc_user_command', 'tc_user_device',
    'tc_user_driver', 'tc_user_geofence', 'tc_user_group', 'tc_user_maintenance',
    'tc_user_notification', 'tc_user_order', 'tc_user_report', 'tc_user_user', 'tc_users'
  ];
  
  if (!allowedTables.includes(tableName)) {
    return res.status(400).send(`
      <h2>❌ Tabela não permitida: ${tableName}</h2>
      <p><a href="/">← Voltar</a></p>
    `);
  }
  
  // Query para contar total de registros
  const countQuery = `SELECT COUNT(*) as total FROM ${tableName}`;
  
  connection.query(countQuery, (countError, countResult) => {
    if (countError) {
      return res.status(500).send(`<h2>❌ Erro: ${countError.message}</h2>`);
    }
    
    const totalRecords = countResult[0].total;
    const totalPages = Math.ceil(totalRecords / limit);
    
    // Query principal com LIMIT e OFFSET
    const query = `SELECT * FROM ${tableName} LIMIT ? OFFSET ?`;
    
    connection.query(query, [parseInt(limit), parseInt(offset)], (error, results) => {
      if (error) {
        return res.status(500).send(`<h2>❌ Erro: ${error.message}</h2>`);
      }
      
      // Obter estrutura da tabela
      const describeQuery = `DESCRIBE ${tableName}`;
      connection.query(describeQuery, (descError, columns) => {
        if (descError) {
          columns = [];
        }
        
        res.send(`
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>${tableName} - SmartLogger API</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      background: #f8f9fa; 
                      color: #333;
                      line-height: 1.6;
                  }
                  .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
                  .header { 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                      color: white; 
                      padding: 30px 20px; 
                      border-radius: 10px; 
                      margin-bottom: 30px;
                      text-align: center;
                  }
                  .header h1 { font-size: 2em; margin-bottom: 10px; }
                  .nav { background: white; padding: 15px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .nav a { color: #667eea; text-decoration: none; margin-right: 15px; font-weight: 500; }
                  .nav a:hover { text-decoration: underline; }
                  .info-bar { 
                      background: white; 
                      padding: 20px; 
                      border-radius: 8px; 
                      margin-bottom: 20px; 
                      display: flex; 
                      justify-content: space-between; 
                      align-items: center; 
                      flex-wrap: wrap;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  .info-item { margin: 5px 0; }
                  .info-item strong { color: #667eea; }
                  .table-container { 
                      background: white; 
                      border-radius: 8px; 
                      overflow: hidden; 
                      box-shadow: 0 4px 6px rgba(0,0,0,0.1); 
                      margin-bottom: 20px;
                  }
                  table { width: 100%; border-collapse: collapse; }
                  th { 
                      background: #f8f9fa; 
                      padding: 12px 8px; 
                      text-align: left; 
                      border-bottom: 2px solid #dee2e6; 
                      font-weight: 600;
                      color: #495057;
                      font-size: 0.9em;
                      position: sticky;
                      top: 0;
                  }
                  td { 
                      padding: 10px 8px; 
                      border-bottom: 1px solid #dee2e6; 
                      font-size: 0.85em;
                      max-width: 200px;
                      overflow: hidden;
                      text-overflow: ellipsis;
                      white-space: nowrap;
                  }
                  tr:hover { background: #f8f9fa; }
                  .json-value { 
                      font-family: 'Courier New', monospace; 
                      background: #f1f3f4; 
                      padding: 2px 4px; 
                      border-radius: 3px; 
                      font-size: 0.8em;
                      cursor: pointer;
                  }
                  .json-value:hover { background: #e8eaed; }
                  .pagination { 
                      display: flex; 
                      justify-content: center; 
                      align-items: center; 
                      gap: 10px; 
                      margin: 20px 0;
                      background: white;
                      padding: 20px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  .page-btn { 
                      padding: 8px 12px; 
                      background: #667eea; 
                      color: white; 
                      text-decoration: none; 
                      border-radius: 5px; 
                      font-size: 0.9em;
                  }
                  .page-btn:hover { background: #5a6fd8; }
                  .page-btn.disabled { background: #ccc; pointer-events: none; }
                  .page-btn.current { background: #764ba2; }
                  .controls { 
                      background: white; 
                      padding: 15px; 
                      border-radius: 8px; 
                      margin-bottom: 20px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  .controls label { margin-right: 10px; font-weight: 500; }
                  .controls select, .controls input { 
                      padding: 5px 10px; 
                      border: 1px solid #ddd; 
                      border-radius: 4px; 
                      margin-right: 10px;
                  }
                  .btn { 
                      padding: 8px 15px; 
                      background: #667eea; 
                      color: white; 
                      border: none; 
                      border-radius: 4px; 
                      cursor: pointer; 
                      text-decoration: none;
                      display: inline-block;
                  }
                  .btn:hover { background: #5a6fd8; }
                  .modal { 
                      display: none; 
                      position: fixed; 
                      top: 0; left: 0; 
                      width: 100%; height: 100%; 
                      background: rgba(0,0,0,0.5); 
                      z-index: 1000;
                  }
                  .modal-content { 
                      background: white; 
                      margin: 5% auto; 
                      padding: 20px; 
                      width: 80%; 
                      max-width: 600px; 
                      border-radius: 8px; 
                      position: relative;
                  }
                  .close { 
                      position: absolute; 
                      top: 10px; right: 15px; 
                      font-size: 28px; 
                      cursor: pointer; 
                  }
                  pre { 
                      background: #f1f3f4; 
                      padding: 15px; 
                      border-radius: 5px; 
                      overflow-x: auto; 
                      font-size: 0.9em;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>📊 ${tableName}</h1>
                      <p>Visualizador de Dados - SmartLogger API</p>
                  </div>
                  
                  <div class="nav">
                      <a href="/">🏠 Início</a>
                      <a href="/database/tables">📋 Todas as Tabelas</a>
                      <a href="/database/table/${tableName}?limit=10">📥 JSON Raw</a>
                      <a href="javascript:void(0)" onclick="showQueryModal()">📝 Query SQL</a>
                  </div>
                  
                  <div class="info-bar">
                      <div>
                          <div class="info-item"><strong>Tabela:</strong> ${tableName}</div>
                          <div class="info-item"><strong>Total de Registros:</strong> ${totalRecords.toLocaleString()}</div>
                      </div>
                      <div>
                          <div class="info-item"><strong>Página:</strong> ${page} de ${totalPages}</div>
                          <div class="info-item"><strong>Exibindo:</strong> ${results.length} registros</div>
                      </div>
                  </div>
                  
                  <div class="controls">
                      <label>Registros por página:</label>
                      <select onchange="changeLimit(this.value)">
                          <option value="10" ${limit == 10 ? 'selected' : ''}>10</option>
                          <option value="20" ${limit == 20 ? 'selected' : ''}>20</option>
                          <option value="50" ${limit == 50 ? 'selected' : ''}>50</option>
                          <option value="100" ${limit == 100 ? 'selected' : ''}>100</option>
                      </select>
                      
                      <label>Ir para página:</label>
                      <input type="number" min="1" max="${totalPages}" value="${page}" onchange="goToPage(this.value)" style="width: 80px;">
                      
                      <a href="/database/table/${tableName}?limit=${limit}" class="btn" target="_blank">📥 Baixar JSON</a>
                  </div>
                  
                  <div class="table-container">
                      <table>
                          <thead>
                              <tr>
                                  ${columns.length > 0 ? 
                                    columns.map(col => `<th>${col.Field}<br><small style="color: #6c757d;">${col.Type}</small></th>`).join('') :
                                    results.length > 0 ? Object.keys(results[0]).map(key => `<th>${key}</th>`).join('') : '<th>Sem dados</th>'
                                  }
                              </tr>
                          </thead>
                          <tbody>
                              ${results.map(row => `
                                  <tr>
                                      ${Object.values(row).map(value => {
                                        if (value === null) return '<td><em>null</em></td>';
                                        if (typeof value === 'object') {
                                          return `<td><span class="json-value" onclick="showJson('${JSON.stringify(value).replace(/'/g, "\\'")}')">📄 JSON</span></td>`;
                                        }
                                        let displayValue = String(value);
                                        if (displayValue.length > 50) {
                                          displayValue = displayValue.substring(0, 50) + '...';
                                        }
                                        return `<td title="${String(value).replace(/"/g, '&quot;')}">${displayValue}</td>`;
                                      }).join('')}
                                  </tr>
                              `).join('')}
                          </tbody>
                      </table>
                  </div>
                  
                  <div class="pagination">
                      <a href="?page=1&limit=${limit}" class="page-btn ${page <= 1 ? 'disabled' : ''}">⏮️ Primeira</a>
                      <a href="?page=${Math.max(1, page - 1)}&limit=${limit}" class="page-btn ${page <= 1 ? 'disabled' : ''}">⬅️ Anterior</a>
                      
                      ${Array.from({length: Math.min(5, totalPages)}, (_, i) => {
                        const pageNum = Math.max(1, Math.min(totalPages, page - 2 + i));
                        return `<a href="?page=${pageNum}&limit=${limit}" class="page-btn ${pageNum === page ? 'current' : ''}">${pageNum}</a>`;
                      }).join('')}
                      
                      <a href="?page=${Math.min(totalPages, page + 1)}&limit=${limit}" class="page-btn ${page >= totalPages ? 'disabled' : ''}">➡️ Próxima</a>
                      <a href="?page=${totalPages}&limit=${limit}" class="page-btn ${page >= totalPages ? 'disabled' : ''}">⏭️ Última</a>
                  </div>
              </div>
              
              <!-- Modal para JSON -->
              <div id="jsonModal" class="modal">
                  <div class="modal-content">
                      <span class="close" onclick="closeModal()">&times;</span>
                      <h3>📄 Dados JSON</h3>
                      <pre id="jsonContent"></pre>
                  </div>
              </div>
              
              <!-- Modal para Query SQL -->
              <div id="queryModal" class="modal">
                  <div class="modal-content">
                      <span class="close" onclick="closeQueryModal()">&times;</span>
                      <h3>📝 Query SQL Executada</h3>
                      <pre>${query.replace('?', limit).replace('?', offset)}</pre>
                      <p><strong>Parâmetros:</strong> LIMIT ${limit}, OFFSET ${offset}</p>
                  </div>
              </div>
              
              <script>
                  function showJson(jsonStr) {
                      document.getElementById('jsonContent').textContent = JSON.stringify(JSON.parse(jsonStr), null, 2);
                      document.getElementById('jsonModal').style.display = 'block';
                  }
                  
                  function closeModal() {
                      document.getElementById('jsonModal').style.display = 'none';
                  }
                  
                  function showQueryModal() {
                      document.getElementById('queryModal').style.display = 'block';
                  }
                  
                  function closeQueryModal() {
                      document.getElementById('queryModal').style.display = 'none';
                  }
                  
                  function changeLimit(newLimit) {
                      window.location.href = '?page=1&limit=' + newLimit;
                  }
                  
                  function goToPage(newPage) {
                      if (newPage >= 1 && newPage <= ${totalPages}) {
                          window.location.href = '?page=' + newPage + '&limit=${limit}';
                      }
                  }
                  
                  // Fechar modal clicando fora
                  window.onclick = function(event) {
                      const jsonModal = document.getElementById('jsonModal');
                      const queryModal = document.getElementById('queryModal');
                      if (event.target === jsonModal) {
                          jsonModal.style.display = 'none';
                      }
                      if (event.target === queryModal) {
                          queryModal.style.display = 'none';
                      }
                  }
              </script>
          </body>
          </html>
        `);
      });
    });
  });
});

// NOVO ENDPOINT DINÂMICO: /database/table/:tableName
app.get('/database/table/:tableName', (req, res) => {
  const tableName = req.params.tableName;
  const limit = req.query.limit || 100;
  
  console.log(`🗂️ Requisição para tabela: ${tableName}`);
  
  // Lista de tabelas permitidas (segurança)
  const allowedTables = [
    'DATABASECHANGELOG', 'DATABASECHANGELOGLOCK',
    'tc_attributes', 'tc_calendars', 'tc_commands', 'tc_commands_queue',
    'tc_device_attribute', 'tc_device_command', 'tc_device_driver', 'tc_device_geofence',
    'tc_device_maintenance', 'tc_device_notification', 'tc_device_order', 'tc_device_report',
    'tc_devices', 'tc_drivers', 'tc_events', 'tc_geofences',
    'tc_group_attribute', 'tc_group_command', 'tc_group_driver', 'tc_group_geofence',
    'tc_group_maintenance', 'tc_group_notification', 'tc_group_order', 'tc_group_report',
    'tc_groups', 'tc_keystore', 'tc_maintenances', 'tc_notifications',
    'tc_orders', 'tc_positions', 'tc_reports', 'tc_servers', 'tc_statistics',
    'tc_user_attribute', 'tc_user_calendar', 'tc_user_command', 'tc_user_device',
    'tc_user_driver', 'tc_user_geofence', 'tc_user_group', 'tc_user_maintenance',
    'tc_user_notification', 'tc_user_order', 'tc_user_report', 'tc_user_user', 'tc_users'
  ];
  
  if (!allowedTables.includes(tableName)) {
    return res.status(400).json({
      success: false,
      message: `Tabela '${tableName}' não permitida ou não existe`,
      allowedTables: allowedTables
    });
  }
  
  const query = `SELECT * FROM ${tableName} LIMIT ?`;
  
  connection.query(query, [parseInt(limit)], (error, results) => {
    if (error) {
      console.error('❌ Erro na query:', error);
      return res.status(500).json({
        success: false,
        message: `Erro ao buscar dados da tabela ${tableName}`,
        error: error.message
      });
    }
    
    console.log(`✅ Encontrados ${results.length} registros na tabela ${tableName}`);
    
    res.json({
      success: true,
      data: results,
      count: results.length,
      table: tableName,
      limit: limit,
      query: query,
      message: `${results.length} registros encontrados na tabela ${tableName}`
    });
  });
});

// ENDPOINT EXTRA: /database/query
app.post('/database/query', (req, res) => {
  const { query } = req.body;
  
  console.log('📝 Query personalizada recebida:', query);
  
  // Validação de segurança - só permite SELECT
  if (!query || !query.trim().toLowerCase().startsWith('select')) {
    return res.status(400).json({
      success: false,
      message: 'Apenas queries SELECT são permitidas por segurança'
    });
  }
  
  connection.query(query, (error, results) => {
    if (error) {
      console.error('❌ Erro na query personalizada:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro ao executar query',
        error: error.message,
        query: query
      });
    }
    
    console.log(`✅ Query executada com sucesso: ${results.length} resultados`);
    
    res.json({
      success: true,
      data: results,
      count: results.length,
      query: query,
      message: 'Query executada com sucesso'
    });
  });
});

// ENDPOINT DE TESTE: /database/test
app.get('/database/test', (req, res) => {
  res.json({
    success: true,
    message: 'Servidor de banco funcionando!',
    timestamp: new Date().toISOString(),
    database: {
      host: dbConfig.host,
      database: dbConfig.database,
      status: 'conectado'
    }
  });
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`🚀 Servidor de banco rodando na porta ${PORT}`);
  console.log(`📡 Endpoints disponíveis:`);
  console.log(`   GET  http://localhost:${PORT}/database/test`);
  console.log(`   GET  http://localhost:${PORT}/database/tc-devices`);
  console.log(`   POST http://localhost:${PORT}/database/query`);
});

// Testar conexão com o banco MySQL
connection.connect((error) => {
  if (error) {
    console.error('❌ Erro ao conectar com o banco MySQL:', error);
    console.log('🔧 Verifique:');
    console.log('   - Host:', dbConfig.host);
    console.log('   - Porta:', dbConfig.port);
    console.log('   - Usuário:', dbConfig.user);
    console.log('   - Banco:', dbConfig.database);
    return;
  }
  console.log('✅ Conectado ao banco MySQL com sucesso!');
});
